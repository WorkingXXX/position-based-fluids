layout (local_size_x = 1) in;

layout (binding = 0, rgba32f) uniform readonly imageBuffer imgPredicted;
layout (binding = 1, r32ui)   uniform writeonly uimageBuffer imgInKeys;
layout (binding = 2, r32ui)   uniform writeonly uimageBuffer imgInPermutation;

layout (location = 0) uniform int N;

void main()                               
{
    const int i = int(gl_GlobalInvocationID.x);
    if (i < N) {
        vec4 predicted = imageLoad(imgPredicted, i);
        
        ivec3 currentCell = ivec3(predicted.xyz / h);
        
        int cellHash = calcGridHash(currentCell);
        
        imageStore(imgInKeys, i, ivec4(cellHash,0,0,0));
    } else {
        imageStore(imgInKeys, i, ivec4(2147483647 - 1,0,0,0)); //max_int
    }
    
    imageStore(imgInPermutation, i, ivec4(i,0,0,0));
}
