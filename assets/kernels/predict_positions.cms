layout (local_size_x = 1) in;

layout (binding = 0, rgba32f) uniform readonly  imageBuffer imgPositions;
layout (binding = 1, rgba32f) uniform writeonly imageBuffer imgPredicted;
layout (binding = 2, rgba32f) uniform           imageBuffer imgVelocities;

layout (location = 0) uniform int  N;
layout (location = 1) uniform bool pauseSim;

void main()                               
{
    const int i = int(gl_GlobalInvocationID.x);
    if (i >= N) return;

    if (!pauseSim)
    {
        // read data
        vec4 velocity = imageLoad(imgVelocities, i);
        vec4 position = imageLoad(imgPositions, i);
    
        // Append gravity (if simulation isn't pause)
        // ignore last component in calculations so it can store additional related information
        vec3 newVelocity = velocity.xyz + Params.timeStep * vec3(0,-Params.gravity,0);
        imageStore(imgVelocities, i, vec4(newVelocity,velocity.w));
        
        
        // Compute new predicted position
        vec3 predictedPosition = position.xyz + Params.timeStep * newVelocity;
        imageStore(imgPredicted, i, vec4(predictedPosition,position.w));
    }
}
