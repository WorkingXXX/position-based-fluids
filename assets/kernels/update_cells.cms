layout (local_size_x = 1) in;

layout (binding = 0, r32i)    uniform readonly  iimageBuffer imgKeys;
layout (binding = 1, r32ui)   uniform writeonly uimageBuffer imgCells;

layout (location = 0) uniform int N;

void main()
{
    const int i = int(gl_GlobalInvocationID.x);
    if (i >= N) return;

    int cell_index = imageLoad(imgKeys, i).x;

    if (i > 0) 
    {
        int prev_cell_index = imageLoad(imgKeys, i - 1).x;
        
        // compare previous cell in sorted
        if(prev_cell_index != cell_index)
        {
            imageStore(imgCells, cell_index * 2 + 0, uvec4(i,0,0,0));
            imageStore(imgCells, prev_cell_index * 2 + 1, uvec4(i - 1,0,0,0));
        }
        
        // the last particle is ALWAYS the end of a cell
        if (i == (N-1))
            imageStore(imgCells, cell_index * 2 + 1, uvec4(i,0,0,0));
    } 
    else if (i == 0) // the first particle is ALWAYS the start of a cell
    {
        imageStore(imgCells, cell_index * 2 + 0, uvec4(i,0,0,0));
    } 
}
